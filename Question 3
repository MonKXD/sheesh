1. Linear Regression using Scikit-learn

Code:

# Task 1: Data Preparation
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Create a simple dataset
data = {'X': [1, 2, 3, 4, 5], 'Y': [2, 4, 5, 4, 5]}
df = pd.DataFrame(data)

# Visualize the data
plt.scatter(df['X'], df['Y'])
plt.title('Original Data')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

# Task 2: Train the Linear Regression Model
X = df[['X']]
y = df['Y']
model = LinearRegression()
model.fit(X, y)
print("Slope (m):", model.coef_[0])
print("Intercept (c):", model.intercept_)

# Task 3: Predictions and Evaluation
y_pred = model.predict(X)
mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)
print("Mean Squared Error:", mse)
print("R^2 Score:", r2)

# Task 4: Visualizing the Regression Line
plt.scatter(X, y, color='blue')
plt.plot(X, y_pred, color='red')
plt.title('Linear Regression Line')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

2. Logistic Regression using Scikit-learn

Code:

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Create a dataset
X = np.array([[1], [2], [3], [4], [5], [6]])
y = np.array([0, 0, 0, 1, 1, 1])

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train logistic regression
log_model = LogisticRegression()
log_model.fit(X_train, y_train)

# Predictions and evaluation
y_pred = log_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Visualize
plt.scatter(X, y, color='black')
x_vals = np.linspace(0, 7, 100)
y_vals = log_model.predict_proba(x_vals.reshape(-1, 1))[:, 1]
plt.plot(x_vals, y_vals, color='red')
plt.title('Logistic Regression Curve')
plt.xlabel('X')
plt.ylabel('Probability')
plt.show()

3. Using SciPy for Linear Algebra and Signal Processing

Code:

import scipy.linalg as la
from scipy.fft import fft, ifft

# Define a matrix for eigenvalues/eigenvectors
A = np.array([[4, -2], [1, 1]])
eigenvalues, eigenvectors = la.eig(A)
print("Eigenvalues:", eigenvalues)
print("Eigenvectors:\n", eigenvectors)

# FFT and IFFT
signal = np.array([1, 2, 3, 4])
signal_fft = fft(signal)
signal_ifft = ifft(signal_fft)
print("FFT:", signal_fft)
print("IFFT:", signal_ifft)

